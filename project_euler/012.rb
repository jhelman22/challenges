# Problem 12
#
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?
#
# Understand the algorithm? http://code.jasonbhill.com/sage/project-euler-problem-12/

def num_divisors(n)
  n /= 2 if n.even?
  divisors = 1
  count = 0
  while n.even?
    count += 1
    n /= 2
  end
  divisors *= (count + 1)
  m = 3
  while n != 1
    count = 0
    while n % m == 0
      count += 1
      n /= m
    end
    divisors *= (count + 1)
    m += 2
  end
  divisors
end

def triangle_index(factors)
  n = 1
  left = num_divisors(n)
  right = num_divisors(n+1)
  while left * right < factors
    n += 1
    left = right
    right = num_divisors(n+1)
  end
  n
end

n = triangle_index(500)
triangle = (n * (n +1)) / 2
puts triangle

# Answer: 76576500
